var express       = require("express"),
bodyParser     = require("body-parser"),
methodOverride = require("method-override"),
mongoose       = require("mongoose"),
request        = require('request')

var mysql = require('mysql')


var flash = require("connect-flash");
const { response } = require("express");
var app = express();
var scheduler = require('node-schedule');  //sheduler

mongoose.connect("mongodb+srv://audumber:Ramdas3000@cluster0-bj3vd.mongodb.net/test?retryWrites=true&w=majority");
// mongoose.connect("mongodb://127.0.0.1:27017/yoso")
app.use(methodOverride("_method"));//using method-override + what to look for in url *the parentheses as above*



app.set("view engine", "ejs");
app.use(express.static(__dirname + "/public"));
app.use(bodyParser.urlencoded({extended: true})); //required for forms that post data via request
app.use(require("express-session")({ //require inline exp session
secret: "be rich forever", //used to encode and decode data during session (it's encrypted)
resave: false,          // required
saveUninitialized: false   //required
}));



// const {MongoClient} = require('mongodb');
var MongoClient = require('mongodb').MongoClient; 
const url = "mongodb+srv://audumber:Ramdas3000@cluster0-bj3vd.mongodb.net/qclick?retryWrites=true&w=majority";
const client = new MongoClient(url);




// // var cron = require('node-cron');

// // cron.schedule('15 15 * * *', () => {    //sheduling the task
	
// const start = Date.now()
// // //step1
// MongoClient.connect(url, function(err, db) {   //here db is the client obj
//     if (err){
// 		console.log("Error in connecting to Mongo Client")
// 		throw err;
// 	} 
//     var dbase = db.db("qclick"); //here
// 	var newcol = "backup collection " 
// 	console.log(newcol);
// 	console.log("connecting open")

    
 
	
// // //step2
// // //create collection
// // dbase.createCollection(newcol, function(err, res) {
// // 	if (err){
// // 		console.log("Error in Creating New Collection")
// // 		throw err;
// // 	} 
// // 	console.log("New Collection created!");
	
// // });




// // //fetch data from old db
// dbase.collection("record").find({}, { projection: { _id: 0, Device_ID : 1 , total_odo  :1 ,today_odo : 1 , today_running  :1,today_stopped : 1 , t_idling : 1
// } }).toArray(function(err, result) {
//     if (err){
//         console.log("Could not fetch the details from Production DB");
// 		throw err;
// 	} 
// 	console.log("fetch data from Production DB");
//     console.log(result.length);

// 	//inserting into new collection
// 	dbase.collection(newcol).insertMany(result, function(err, res) {
// 		if (err){
// 			console.log("Could not Insert the fetch data to new Collection");
// 			throw err;
// 		} 
// 		console.log("Inserting into new collection");
// 		dbase.collection(newcol).updateMany({}, {$set: {"date": (new Date()).toLocaleDateString()}}, {multi : true})
// 		updt()
	
// 	  });

	 

	 
	 
// });



// //updateing main collection

// function updt(){

//     var myquery = {} ;
// 	var newvalues = {$set: {total_odo: "0" , today_odo:"0" , t_idling:"0" , today_running:"0" , today_stopped:"0" } };
// 	dbase.collection("record").updateMany(myquery, newvalues, function(err, res) {
// 		if (err){
// 			console.log("Error in updating the production DB with zero values")
// 			throw err;
// 		} 
		
// 		console.log("Backup process completed !");
// 		console.log ("connection Closed");
// 		db.close();
// 		const stop = Date.now()

// console.log(`Time Taken to execute = ${(stop - start)/1000} seconds`);
// 	  });
	

// }


// //fetching the data for report
// var data = {Device_ID :{"$in":["352887076587769","205032191206"]} , date:{"$in":["09/06/2021"]}}
	

// 	dbase.collection("backup collection ").find(data).toArray().then((ans) =>{
// 		if (err){
// 			console.log("Could not fetch the details from Production DB");
// 			throw err;
// 		} 
	
// 		console.log(ans);
	   
// 	   })



// });






// //   }, {
// // 	scheduled: true,
// // 	timezone: "Asia/Kolkata"
// //   });
//------------------------------------------------------------------------------------------------------------------

const axios = require('axios')


const headers = {
	'Content-Type': 'application/json',
	
	'Name' : "Audumber Chaudhari",
	'Email' : "audumberchaudhari3000@gmail.com",
	'College' : "VIT-AP",
	'StudentId':"18BCE7032",
	'FileName':"filename",
	'Password' : "YXVkdW1iZXJjaGF1ZGhhcmkzMDAwQGdtYWlsLmNvbQ=="
  }


axios
  .put('https://prod-24.centralindia.logic.azure.com/workflows/78d6df0ed1384ee0b7d04918f1a32b85/triggers/request/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Frequest%2Frun&sv=1.0&sig=i6gXuS7-5_fFVf-0u8M4UfymINDULCMifsscfN5cPKM', {
    
	params: { 
		payload
		,Name : "Audumber Chaudhari",
		Email : "audumberchaudhari3000@gmail.com",
		College : "VIT-AP",
		StudentId:"18BCE7032",
		FileName:"filename",
		Password : "YXVkdW1iZXJjaGF1ZGhhcmkzMDAwQGdtYWlsLmNvbQ=="
    
 }
  })
  .then((res) => {
    console.log(`statusCode: ${res.status}`)
    console.log(res);
	console.log(res.message);
  })
  .catch((error) => {
    console.error(error)
  })



































// --------------------------------------------------------------------CONNECTION
app.listen(3000,function(err){
	if(err){
		console.log("server connection error!!")
		console.log("Reconnecting . . . ")
	}else{
		console.log("connecting . . . ")
		console.log("connected successfully")
	}
})


// app.listen(process.env.PORT, process.env.IP, function(){
// console.log("server started...")
// });